<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <MSBuildAllProjects Condition=" '$(MSBuildVersion)' == '' Or '$(MSBuildVersion)' &lt; '16.0' ">$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>

    <UsingYardarmSdk>true</UsingYardarmSdk>

    <YardarmToolPath Condition=" '$(YardarmToolPath)' == '' And $([MSBuild]::IsOSPlatform('Linux')) ">$(MSBuildThisFileDirectory)..\tools\net6.0\linux-x64\yardarm\</YardarmToolPath>
    <YardarmToolPath Condition=" '$(YardarmToolPath)' == '' ">$(MSBuildThisFileDirectory)..\tools\net6.0\win10-x64\yardarm\</YardarmToolPath>
    <YardarmTaskBasePath Condition=" '$(YardarmTaskBasePath)' == '' ">$(MSBuildThisFileDirectory)..\tasks\</YardarmTaskBasePath>
  </PropertyGroup>

  <Import Project="$(CustomBeforeYardarmProps)" Condition=" '$(CustomBeforeYardarmProps)' != '' And Exists('$(CustomBeforeYardarmProps)') " />

  <PropertyGroup>
    <!--
      Set to "System.Text.Json" or "Newtonsoft.Json" to automatically add the JSON extension.
      Any other value, such as None, will not add JSON support to the generated SDK.
    -->
    <JsonMode Condition=" '$(JsonMode)' == '' ">System.Text.Json</JsonMode>

    <!--
      Set to "Microsoft.Extensions.Http" to automatically add dependency injection for HTTP client factories.
      Any other value, such as None, will not add DI support to the generated SDK.
    -->
    <DependencyInjectionMode Condition=" '$(DependencyInjectionMode)' == '' ">Microsoft.Extensions.Http</DependencyInjectionMode>

    <!-- By default embed source files with debug symbols -->
    <EmbedAllSources Condition=" '$(EmbedAllSources)' == '' ">true</EmbedAllSources>

    <!-- By default output snupkg symbol packages -->
    <IncludeSymbols Condition=" '$(IncludeSymbols)' == '' ">true</IncludeSymbols>
    <SymbolPackageFormat Condition=" '$(SymbolPackageFormat)' == '' ">snupkg</SymbolPackageFormat>

    <!-- Disable default Compile, EmbeddedResource, and Content items for Yardarm projects -->
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
    <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>
    <EnableDefaultContentItems>false</EnableDefaultContentItems>

    <!-- Add OpenApiSpec items automatically -->
    <EnableDefaultOpenApiItems Condition=" '$(EnableDefaultOpenApiItems)' == '' ">true</EnableDefaultOpenApiItems>

    <!--
      NuGet should always restore Yardarm projects with "PackageReference" style restore.  Setting this property will cause the right thing to happen even if there aren't any PackageReference items in the project.
    -->
    <RestoreProjectStyle>PackageReference</RestoreProjectStyle>

    <!-- Workload resolver is not required and doesn't work. -->
    <MSBuildEnableWorkloadResolver>false</MSBuildEnableWorkloadResolver>

    <!-- Don't generate assembly info -->
    <GenerateAssemblyInfo Condition="'$(GenerateAssemblyInfo)' == ''">false</GenerateAssemblyInfo>

    <!-- Generate a documentation file by default -->
    <GenerateDocumentationFile Condition=" '$(GenerateDocumentationFile)' == '' ">true</GenerateDocumentationFile>

    <!-- Don't generate editor config file -->
    <GenerateMSBuildEditorConfigFile Condition="'$(GenerateMSBuildEditorConfigFile)' == ''">false</GenerateMSBuildEditorConfigFile>

    <!-- Disable Visual Studio's Fast Up-to-date Check and rely on MSBuild to determine -->
    <DisableFastUpToDateCheck Condition="'$(DisableFastUpToDateCheck)' == ''">true</DisableFastUpToDateCheck>

    <!-- Nullable ref types are always enabled in Yardarm -->
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <Target Name="CreateManifestResourceNames" />

  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" Condition=" '$(MicrosoftCommonPropsHasBeenImported)' != 'true' "/>

  <!--
    Add default items. Put this after Microsoft.NET.Sdk.props so we can remove the OpenApiSpec files from None.
  -->
  <ItemGroup Condition=" '$(EnableDefaultItems)' == 'true' ">
    <OpenApiSpec Include="**/*.json;**/*.yaml;**/*.yml" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" Condition=" '$(EnableDefaultOpenApiItems)' == 'true' " />
    <None Remove="@(OpenApiSpec)" Condition=" '$(EnableDefaultOpenApiItems)' == 'true' And '$(EnableDefaultNoneItems)' == 'true' " />
  </ItemGroup>

  <Import Project="$(CustomAfterYardarmProps)" Condition=" '$(CustomAfterYardarmProps)' != '' And Exists('$(CustomAfterYardarmProps)') " />

  <!-- Extension point for dynamically generating/collecting OpenApiSpec items -->
  <Target Name="CollectOpenApiSpecs" />

  <!-- Extension point for dynamically generating/collecting YardarmExtension items -->
  <Target Name="CollectYardarmExtensions" />

  <!-- For CPS/VS support. Importing in .props allows any subsequent targets to redefine this if needed -->
  <Target Name="CompileDesignTime" />
</Project>
