<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>netcoreapp3.1;net472</TargetFrameworks>

    <AssemblyName>Yardarm.Build.Tasks</AssemblyName>
    <RootNamespace>Yardarm.Build.Tasks</RootNamespace>
    <LangVersion>12</LangVersion>
    <Nullable>enable</Nullable>

    <PackageId>Yardarm.Sdk</PackageId>
    <PackageType>MSBuildSdk</PackageType>
    <Description>MSBuild SDK for a project that generates a Yardarm SDK from an OpenAPI specification.</Description>
    <PackageTags>MSBuild MSBuildSdk Yardarm OpenAPI</PackageTags>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>

    <BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>

    <NoWarn>$(NoWarn);NU5100;NU5128;NU5129</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Utilities.Core" PrivateAssets="All" ExcludeAssets="runtime" />
    <PackageReference Include="Microsoft.Build.Framework" PrivateAssets="All" ExcludeAssets="runtime" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="..\..\main\Yardarm.CommandLine\Interop\*.cs">
      <LinkBase>Interop</LinkBase>
    </Compile>
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net472' ">
    <Reference Include="System.Runtime.Serialization" Pack="false" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="Sdk\**\*.props;Sdk\**\*.targets" Pack="true" PackagePath="Sdk" />
    <Content Include="build\**\*" Pack="true" PackagePath="build" />
    <None Remove="@(Content)" />
    <!-- Make sure VS considers any change to any of the targets as requiring a new build/pack -->
    <UpToDateCheckInput Include="@(Content)" />
  </ItemGroup>

  <!--
    Publish and collect the Yardarm command-line application to include as a tool.
    Only do this once as part of the outer multi-targeting run.
  -->
  <ItemGroup>
    <YardarmCommandLineRuntimeIdentifier Include="win-x64" />
    <YardarmCommandLineRuntimeIdentifier Include="linux-x64" />
  </ItemGroup>

  <Target Name="DefineYardarmCommandLineRids">
    <ItemGroup>
      <_YardarmCommandLine Include="..\..\main\Yardarm.CommandLine\Yardarm.CommandLine.csproj">
        <AdditionalProperties>RuntimeIdentifier=%(YardarmCommandLineRuntimeIdentifier.Identity)</AdditionalProperties>
        <RuntimeIdentifier>%(YardarmCommandLineRuntimeIdentifier.Identity)</RuntimeIdentifier>
      </_YardarmCommandLine>
    </ItemGroup>
  </Target>

  <Target Name="BuildYardarmCommandLine"
          DependsOnTargets="DefineYardarmCommandLineRids">
    <!--
      Ensure that the CommandLine build has been run for both RuntimeIdentifier values
    -->
    <MSBuild Projects="@(_YardarmCommandLine)" Properties="Configuration=$(Configuration);TargetFramework=net8.0;SelfContained=False;PublishReadyToRun=true" Targets="Restore;Publish" BuildInParallel="false" SkipNonexistentProjects="false" ContinueOnError="false">
    </MSBuild>
  </Target>

  <PropertyGroup>
    <GenerateNuspecDependsOn>
      CollectYardarmCommandLine;
      $(GenerateNuspecDependsOn)
    </GenerateNuspecDependsOn>
  </PropertyGroup>
  <Target Name="CollectYardarmCommandLine"
          DependsOnTargets="DefineYardarmCommandLineRids;BuildYardarmCommandLine">
    <!--
      Collect the files to be published. By using ComputeFilesToPublish and PublishItemsOutputGroup we skip
      the cost of actually copying the files to a publish directory, instead it collects the returned items
      and we can load them directly into the NuGet package.
    -->
    <MSBuild Projects="@(_YardarmCommandLine)" Properties="Configuration=$(Configuration);TargetFramework=net8.0;SelfContained=False;PublishReadyToRun=true" Targets="PublishItemsOutputGroup" BuildInParallel="$(BuildInParallel)" SkipNonexistentProjects="false" ContinueOnError="false">
      <Output TaskParameter="TargetOutputs" ItemName="_YardarmCommandLineFiles" />
    </MSBuild>

    <!--
      Filter the files being published to just the files needed by Yardarm, ignoring .xml and .pdb files, etc.
    -->
    <ItemGroup>
      <_FilteredYardarmCommandLineFiles Include="@(_YardarmCommandLineFiles)" Condition=" '%(TargetPath)' == 'Yardarm.CommandLine.exe' " />
      <_FilteredYardarmCommandLineFiles Include="@(_YardarmCommandLineFiles)" Condition=" '%(Extension)' == '.dll' " />
      <_FilteredYardarmCommandLineFiles Include="@(_YardarmCommandLineFiles)" Condition=" '%(TargetPath)' == 'Yardarm.CommandLine.deps.json' " />
      <_FilteredYardarmCommandLineFiles Include="@(_YardarmCommandLineFiles)" Condition=" '%(TargetPath)' == 'Yardarm.CommandLine.runtimeconfig.json' " />

      <_YardarmCommandLineLinuxExecutable Include="@(_YardarmCommandLineFiles-&gt;ClearMetadata())" Condition=" '%(TargetPath)' == 'Yardarm.CommandLine' " RuntimeIdentifier="%(_YardarmCommandLineFiles.RuntimeIdentifier)" />
    </ItemGroup>

    <!--
      PackagePath for specifying a destination will only assume that its value is a file name if it has an extension and that extension
      matches the original file's extension. Otherwise, it assumes that PackagePath is a destination directory. Therefore, the plain
      "Yardarm.CommandLine" from Linux will get put in a subdirectory (it's original name is "apphost"). Therefore, we must copy it
      to a temporary directory with a matching name and no TargetPath metadata.
    -->
    <ItemGroup>
      <_CopiedYardarmCommandLineLinuxExecutable Include="@(_YardarmCommandLineLinuxExecutable->'$(BaseIntermediateOutputPath)pubtemp\%(RuntimeIdentifier)\Yardarm.CommandLine')" />
    </ItemGroup>
    <Copy SourceFiles="@(_YardarmCommandLineLinuxExecutable)" DestinationFiles="@(_CopiedYardarmCommandLineLinuxExecutable)" SkipUnchangedFiles="true">
    </Copy>
    <ItemGroup>
      <_FilteredYardarmCommandLineFiles Include="@(_CopiedYardarmCommandLineLinuxExecutable)" />
      <FileWrites Include="@(_CopiedYardarmCommandLineLinuxExecutable)" />
    </ItemGroup>

    <!--
      Convert the collected _FilteredYardarmCommandLineFiles into _PackageFiles items marked for pack in the appropriate directories.
    -->
    <ItemGroup>
      <_PackageFiles Include="@(_FilteredYardarmCommandLineFiles)" BuildAction="None" Pack="true" PackagePath="tools\net8.0\%(_FilteredYardarmCommandLineFiles.RuntimeIdentifier)\yardarm\%(_FilteredYardarmCommandLineFiles.TargetPath)" />
    </ItemGroup>
  </Target>

</Project>
